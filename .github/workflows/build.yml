name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

  docker:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
          DATE=${{ github.event.head_commit.timestamp }}

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="flarecert-${{ matrix.os }}-${{ matrix.arch }}.exe"
        else
          BINARY_NAME="flarecert-${{ matrix.os }}-${{ matrix.arch }}"
        fi
        
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          VERSION="dev"
        fi
        
        go build -ldflags "-X github.com/bariiss/flarecert/cmd.version=$VERSION -X github.com/bariiss/flarecert/cmd.commit=${{ github.sha }} -X github.com/bariiss/flarecert/cmd.date=$(date -u '+%Y-%m-%d_%H:%M:%S')" -o "$BINARY_NAME" main.go
        
        # Create a unique directory for this artifact
        mkdir -p "dist/${{ matrix.os }}-${{ matrix.arch }}"
        mv "$BINARY_NAME" "dist/${{ matrix.os }}-${{ matrix.arch }}/"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: flarecert-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/${{ matrix.os }}-${{ matrix.arch }}/*
        retention-days: 7

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: flarecert-*
        merge-multiple: true
        path: ./release-artifacts
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./release-artifacts/*
        generate_release_notes: true
        body: |
          ## ðŸš€ What's New
          
          This release includes improvements and bug fixes for FlareCert.
          
          ## ðŸ“¥ Installation
          
          Download the appropriate binary for your system:
          - **Linux (x64)**: `flarecert-linux-amd64`
          - **Linux (ARM64)**: `flarecert-linux-arm64`
          - **macOS (Intel)**: `flarecert-darwin-amd64`
          - **macOS (Apple Silicon)**: `flarecert-darwin-arm64`
          - **Windows (x64)**: `flarecert-windows-amd64.exe`
          
          Make the binary executable and move it to your PATH:
          ```bash
          chmod +x flarecert-*
          sudo mv flarecert-* /usr/local/bin/flarecert
          ```
          
          ## ðŸ”§ Usage
          
          ```bash
          # List your Cloudflare zones
          flarecert zones
          
          # Generate a certificate (staging)
          flarecert cert --domain example.com --staging
          
          # Generate a wildcard certificate
          flarecert cert --domain "*.example.com"
          
          # List certificates
          flarecert list
          
          # Renew certificates
          flarecert renew
          ```
          
          For more information, see the [README](https://github.com/bariiss/flarecert/blob/main/README.md).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
