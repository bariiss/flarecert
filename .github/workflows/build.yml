name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="flarecert-${{ matrix.os }}-${{ matrix.arch }}.exe"
        else
          BINARY_NAME="flarecert-${{ matrix.os }}-${{ matrix.arch }}"
        fi
        
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          VERSION="dev"
        fi
        
        go build -ldflags "-X github.com/bariiss/flarecert/cmd.version=$VERSION -X github.com/bariiss/flarecert/cmd.commit=${{ github.sha }} -X github.com/bariiss/flarecert/cmd.date=$(date -u '+%Y-%m-%d_%H:%M:%S')" -o "$BINARY_NAME" main.go
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: flarecert-${{ matrix.os }}-${{ matrix.arch }}
        path: flarecert-*

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: flarecert-*
        merge-multiple: true
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          */flarecert-*
        generate_release_notes: true
        body: |
          ## ðŸš€ What's New
          
          This release includes improvements and bug fixes for FlareCert.
          
          ## ðŸ“¥ Installation
          
          Download the appropriate binary for your system:
          - **Linux (x64)**: `flarecert-linux-amd64`
          - **Linux (ARM64)**: `flarecert-linux-arm64`
          - **macOS (Intel)**: `flarecert-darwin-amd64`
          - **macOS (Apple Silicon)**: `flarecert-darwin-arm64`
          - **Windows (x64)**: `flarecert-windows-amd64.exe`
          
          Make the binary executable and move it to your PATH:
          ```bash
          chmod +x flarecert-*
          sudo mv flarecert-* /usr/local/bin/flarecert
          ```
          
          ## ðŸ”§ Usage
          
          ```bash
          # List your Cloudflare zones
          flarecert zones
          
          # Generate a certificate (staging)
          flarecert cert --domain example.com --staging
          
          # Generate a wildcard certificate
          flarecert cert --domain "*.example.com"
          
          # List certificates
          flarecert list
          
          # Renew certificates
          flarecert renew
          ```
          
          For more information, see the [README](https://github.com/bariiss/flarecert/blob/main/README.md).
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
